// Failed to fetch latest release from GitHub API. Refer to :h mason-errors-github-api for more information.

#![allow(unused)]

use std::env::args;
use std::sync::{Arc, Mutex, MutexGuard};
use std::time::{Duration, Instant};
use std::{process, thread};
// use tokio::*;
// use tokio::{client, Result};

struct ForksPool {
    forks: Vec<Arc<Mutex<usize>>>,
}

impl ForksPool {
    fn init(nums_of_philos: usize) -> Self {
        let forks: Vec<Arc<Mutex<usize>>> = (0..nums_of_philos)
            .map(|_| Arc::new(Mutex::new(0)))
            .collect();
        ForksPool { forks }
    }
    fn get(&self, id: usize) -> Arc<Mutex<usize>> {
        Arc::clone(&self.forks[id])
    }

    fn take_fork(fork: &Arc<Mutex<usize>>) -> MutexGuard<usize> {
        let mut guard = fork.lock().unwrap();
        *guard += 1;
        guard
    }

    fn drop_fork(fork_guard: &Arc<Mutex<usize>>) {
        drop(fork_guard)
    }
}

#[derive(Debug, Default)]
struct Instructions {
    time_to_sleep: Duration,
    time_to_eat: Duration,
    time_to_die: Duration,
}

impl Instructions {
    fn new(ttd: &str, tte: &str, tts: &str) -> Result<Self, String> {
        let tts: u64 = match tts.parse() {
            Ok(tts) => tts,
            _ => return Err("error parsing time to sleep to A integer".to_string()),
        };
        let tte: u64 = match tte.parse() {
            Ok(tts) => tts,
            _ => return Err("error parsing time to eat to A integer".to_string()),
        };
        let ttd: u64 = match ttd.parse() {
            Ok(tts) => tts,
            _ => return Err("error parsing time to die to A integer".to_string()),
        };
        Ok(Instructions {
            time_to_sleep: Duration::from_millis(tts),
            time_to_eat: Duration::from_millis(tte),
            time_to_die: Duration::from_millis(ttd),
        })
    }
}

type MInstant = Arc<Mutex<Instant>>;

// #[derive(Debug, Clone)]
// struct Philo {
//     id: usize,
//     last_meal: MInstant,
// }

// impl Philo {
//     fn new(id: usize, last_meal: Instant) -> Self {
//         Philo {
//             id,
//             last_meal: Arc::new(Mutex::new(last_meal)),
//         }
//     }

//     fn last_meal(&self) -> MInstant {
//         Arc::clone(&self.last_meal)
//     }
// }

fn main() {
    let start = Instant::now();

    // thread::sleep(Duration::from_secs(2));
    // println!("{} s", start.elapsed().as_millis());

    let args = args().collect::<Vec<String>>();
    if args.len() != 5 {
        return println!("wrong nums of args");
    };
    let nums_of_philos = match args[1].parse() {
        Ok(nums_of_philos) => nums_of_philos,
        _ => return println!("error parsing nums of philos to A integer"),
    };
    let time_to_die = &args[2];
    let time_to_eat = &args[3];
    let time_to_sleep = &args[4];

    let forks = ForksPool::init(nums_of_philos);

    let instructions = match Instructions::new(&time_to_sleep, &time_to_eat, &time_to_die) {
        Ok(instructions) => instructions,
        Err(error) => return println!("{error}"),
    };

    let mut handlers = Vec::new();
    (0..nums_of_philos).for_each(|id| {
        let fork1 = forks.get(id);
        let fork2 = forks.get((id + 1) % nums_of_philos);
        handlers.push(thread::spawn(move || {
            if id % 2 == 0 {
                thread::sleep(Duration::from_millis(2000));
            }
            // let last_meal = Arc::new(Mutex::new(Instant::now()));
            // let last_meal_checker = Arc::clone(&last_meal);
            // let checker = thread::spawn(move || loop {
            //     if last_meal_checker.lock().unwrap().elapsed() > instructions.time_to_die {
            //         thread::sleep(Duration::from_millis(100));
            //         println!("dead {id}");
            //         process::exit(1);
            //     }
            // });

            // let last_meal_philo = Arc::clone(&last_meal);
            loop {
                let guard1 = ForksPool::take_fork(&fork1);
                println!("philo {} took a left fork", id + 1);
                let guard2 = ForksPool::take_fork(&fork2);
                println!("philo {} took a right fork", id + 1);
                // *last_meal_philo.lock().unwrap() = Instant::now();

                println!("philo {} is eating", id + 1);
                thread::sleep(instructions.time_to_eat);
                ForksPool::drop_fork(&fork1);
                ForksPool::drop_fork(&fork2);
                println!("philo {} is sleeping", id + 1);
                thread::sleep(instructions.time_to_sleep);
                println!("philo {} is thinking", id + 1);
                // println!(
                //     "{id} {}",
                //     last_meal_philo.lock().unwrap().elapsed().as_millis()
                // );
            }
        }))
    });

    for handler in handlers {
        handler.join().unwrap();
    }
}
